Application
- Application can be up and running by using the command
    > docker-compose up
- One container will run for the application(xyzbank-api), one container will run for MySql db(mysqldb)
- Swagger ui can be reached put by using this url -> http://localhost:8080/swagger-ui/index.html
- Code coverage is 60% classes and 63% lines in 'all classes in scope'
- Application flow
   1 User is registered with the specified fields. And /register returns username and random password
   2 By using username and password the token can be created. /token endpoint will return an active=0 token
   3 By using this token user can be logon. Under the hood the token will be activated active=1. you should see 'Successfully login'
message
   4 Now token is activated, user can see the account overview /overview
   5 If token is not valid you will see 'Invalid token' message
   6 For the age check, an user can be saved under age 18 and apply the steps from 1 to 5. On step 5 you will see the error
- The passwords and tokens are random generated. Thus, they must be copied each time

Token generation
- I use a uuid as a token but a JWT token would be more convenient

Unit tests
- Test entity builders can be added to unit tests
- More unit tests can be added

Database check
- I have three different table User, Account, Token
- They can be linked to each other by using username field
- You can enter to the mysql container and query the tables by following commands
    >  docker exec -it mysqldb mysql -u root -p
    (password -> root-ag-pass)

    > use xyzbank;
    > select * from User;

Drawbacks
- I should use proper format for ID document but I used a String
- I could not generate a NL iban, I used a uuid
- Token stays active. There should be a process that makes the token passive
- Firstly, I add a query limiter to my application. QueryRateLimiter. It is an aspect.
     It prevents db transaction if there are more than two in one second
     But in my logic, for user registration I need at least four queries.
     I can remove the validation checks but I didn't want to tbh. Currently it is more safe
     So, this limit is not convenient for my application and I disabled it
     (get-overview more than 2 times in a second request in postman request collection will not work as wanted)
     What can I do, I can add a queue process to the application and save all these queries
     According to the application load these queries can be fetched by application and execute.
     Google Cloud Pub/Sub, RabbitMQ or Apache Kafka could be some options for it
- Multiple tokens can be created for a user. I am not sure what is the best practice of it
- The entities between layers could be more accurate. Like Dto, service entities and data entities.


